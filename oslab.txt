fcfs :-
import java.util.*;

class FCFS {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter no of process: ");
        int n = sc.nextInt();
        int pid[] = new int[n];
        int ar[] = new int[n];
        int bt[] = new int[n];
        int ct[] = new int[n];
        int ta[] = new int[n];
        int wt[] = new int[n];
        int temp;
        float avgwt = 0, avgta = 0;
        for (int i = 0; i < n; i++) {
            System.out.println("enter process " + (i + 1) + " arrival time: ");
            ar[i] = sc.nextInt();
            System.out.println("enter process " + (i + 1) + " brust time: ");
            bt[i] = sc.nextInt();
            pid[i] = i + 1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - (i + 1); j++) {
                if (ar[j] > ar[j + 1]) {
                    temp = ar[j];
                    ar[j] = ar[j + 1];
                    ar[j + 1] = temp;
                    temp = bt[j];
                    bt[j] = bt[j + 1];
                    bt[j + 1] = temp;
                    temp = pid[j];
                    pid[j] = pid[j + 1];
                    pid[j + 1] = temp;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                ct[i] = ar[i] + bt[i];
            } else {
                if (ar[i] > ct[i - 1]) {
                    ct[i] = ar[i] + bt[i];
                } else
                    ct[i] = ct[i - 1] + bt[i];
            }
            ta[i] = ct[i] - ar[i];
            wt[i] = ta[i] - bt[i];
            avgwt += wt[i];
            avgta += ta[i];
        }
        System.out.println("\npid arrival brust complete turn waiting");
        for (int i = 0; i < n; i++) {
            System.out.println(pid[i] + " \t " + ar[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" + ta[i] + "\t" + wt[i]);
        }
        sc.close();
        System.out.println("\naverage waiting time: " + (avgwt / n));
        System.out.println("average turnaround time:" + (avgta / n));
        System.out.println("\nGantt Chart:");
        System.out.print("|");
        for (int i = 0; i < n; i++) {
            System.out.print(" " + "p(" + pid[i] + ")" + " " + ct[i]);
        }
        System.out.println();
    }
}


SHORTEST JOB FIRST SCHEDULING
NON PREEMPTIVE:
import java.util.*;

class SJF {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter no of process:");
        int n = sc.nextInt();
        int pid[] = new int[n];
        int at[] = new int[n];
        int bt[] = new int[n];
        int ct[] = new int[n];
        int ta[] = new int[n];
        int wt[] = new int[n];
        int f[] = new int[n];
        int st = 0, tot = 0;
        float avgwt = 0, avgta = 0;
        for (int i = 0; i < n; i++) {
            System.out.println("enter process " + (i + 1) + " arrival time:");
            at[i] = sc.nextInt();
            System.out.println("enter process " + (i + 1) + " brust time:");
            bt[i] = sc.nextInt();
            pid[i] = i + 1;
            f[i] = 0;
        }
        boolean a = true;
        while (true) {
            int c = n, min = 999;
            if (tot == n)
                break;
            for (int i = 0; i < n; i++) {
                if ((at[i] <= st) && (f[i] == 0) && (bt[i] < min)) {
                    min = bt[i];
                    c = i;
                }
            }
            if (c == n)
                st++;
            else {
                ct[c] = st + bt[c];
                st += bt[c];
                ta[c] = ct[c] - at[c];
                wt[c] = ta[c] - bt[c];
                f[c] = 1;
                tot++;
            }
        }
        System.out.println("\npid arrival brust complete turn waiting");
        for (int i = 0; i < n; i++) {
            avgwt += wt[i];
            avgta += ta[i];
            System.out.println(pid[i] + "\t" + at[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" + ta[i] + "\t" + wt[i]);
        }
        System.out.println("\naverage tat is " + (float) (avgta / n));
        System.out.println("average wt is " + (float) (avgwt / n));
        sc.close();
    }
}


PREEMPTIVE:

import java.util.*;

class SRTF {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter no of process:");
        int n = sc.nextInt();
        int pid[] = new int[n];
        int at[] = new int[n];
        int bt[] = new int[n];
        int ct[] = new int[n];
        int ta[] = new int[n];
        int wt[] = new int[n];
        int f[] = new int[n];
        int k[] = new int[n];
        int i, st = 0, tot = 0;
        float avgwt = 0, avgta = 0;
        for (i = 0; i < n; i++) {
            pid[i] = i + 1;
            System.out.println("enter process " + (i + 1) + " arrival time:");
            at[i] = sc.nextInt();
            System.out.println("enter process " + (i + 1) + " burst time:");
            bt[i] = sc.nextInt();
            k[i] = bt[i];
            f[i] = 0;
        }
        while (true) {
            int min = 99, c = n;
            if (tot == n)
                break;
            for (i = 0; i < n; i++) {
                if ((at[i] <= st) && (f[i] == 0) && (bt[i] < min)) {
                    min = bt[i];
                    c = i;
                }
            }
            if (c == n)
                st++;
            else {
                bt[c]--;
                st++;
                if (bt[c] == 0) {
                    ct[c] = st;
                    f[c] = 1;
                    tot++;
                }
            }
        }
        for (i = 0; i < n; i++) {
            ta[i] = ct[i] - at[i];
            wt[i] = ta[i] - k[i];
            avgwt += wt[i];
            avgta += ta[i];
        }
        System.out.println("pid arrival burst complete turn waiting");
        for (i = 0; i < n; i++) {
            System.out.println(pid[i] + "\t" + at[i] + "\t" + k[i] + "\t" + ct[i] + "\t" + ta[i] + "\t" + wt[i]);
        }
        System.out.println("\naverage tat is " + (float) (avgta / n));
        System.out.println("average wt is " + (float) (avgwt / n));
        sc.close();
    }
}


Round robin:-

import java.util.*;

class RoundRobin {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("\nEnter number of processes: ");
        int n = scanner.nextInt();
        int[] bt = new int[n];
        int[] at = new int[n];
        int[] ct = new int[n];
        int[] tat = new int[n];
        int[] wt = new int[n];
        System.out.println("\nEnter arrival time and burst time for each process:");
        for (int i = 0; i < n; i++) {
            System.out.print("P" + (i + 1) + " 'Arrival time': ");
            at[i] = scanner.nextInt();
            System.out.print("P" + (i + 1) + " 'Burst time': ");
            bt[i] = scanner.nextInt();
        }
        System.out.print("Enter time quantum: ");
        int quantum = scanner.nextInt();
        int[] remainingTime = new int[n];
        for (int i = 0; i < n; i++) {
            remainingTime[i] = bt[i];
        }
        int time = 0;
        while (true) {
            boolean allDone = true;
            for (int i = 0; i < n; i++) {
                if (remainingTime[i] > 0 && at[i] <= time) {
                    allDone = false;
                    if (remainingTime[i] > quantum) {
                        time += quantum;
                        remainingTime[i] -= quantum;
                    } else {
                        time += remainingTime[i];
                        ct[i] = time;
                        remainingTime[i] = 0;
                    }
                }
            }
            if (allDone) {
                break;
            }
        }
        for (int i = 0; i < n; i++) {
            tat[i] = ct[i] - at[i];
            wt[i] = tat[i] - bt[i];
        }
        System.out.println("Process\tAT\tBT\tCT\tTAT\tWT");
        for (int i = 0; i < n; i++) {
            System.out.println("P" + (i + 1) + "\t" + at[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" +
                    tat[i] + "\t" + wt[i]);
        }
    }
}

priority scheduling:-

import java.util.*;

class PriorityScheduling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("\nEnter number of processes: ");
        int n = scanner.nextInt();
        int[] bt = new int[n];
        int[] at = new int[n];
        int[] ct = new int[n];
        int[] tat = new int[n];
        int[] wt = new int[n];
        int[] priority = new int[n];
        System.out.println("\nEnter arrival time, burst time, and priority for each process:");
        for (int i = 0; i < n; i++) {
            System.out.print("P" + (i + 1) + " arrival time: ");
            at[i] = scanner.nextInt();
            System.out.print("P" + (i + 1) + " burst time: ");
            bt[i] = scanner.nextInt();
            System.out.print("P" + (i + 1) + " priority: ");
            priority[i] = scanner.nextInt();
        }
        int[] remainingTime = new int[n];
        for (int i = 0; i < n; i++) {
            remainingTime[i] = bt[i];
        }
        int time = 0;
        boolean[] completed = new boolean[n];
        int completedCount = 0;
        while (completedCount < n) {
            int highestPriorityIndex = -1;
            int highestPriority = Integer.MAX_VALUE;
            for (int i = 0; i < n; i++) {
                if (at[i] <= time && !completed[i] && priority[i] < highestPriority) {
                    highestPriority = priority[i];
                    highestPriorityIndex = i;
                }
            }
            if (highestPriorityIndex == -1) {
                time++;
            } else {
                time += bt[highestPriorityIndex];
                ct[highestPriorityIndex] = time;
                tat[highestPriorityIndex] = ct[highestPriorityIndex] - at[highestPriorityIndex];
                wt[highestPriorityIndex] = tat[highestPriorityIndex] - bt[highestPriorityIndex];
                completed[highestPriorityIndex] = true;
                completedCount++;
            }
        }
        System.out.println("Process\tAT\tBT\tPriority\tCT\tTAT\tWT");
        for (int i = 0; i < n; i++) {
            System.out.println("P" + (i + 1) + "\t" + at[i] + "\t" + bt[i] + "\t" + priority[i] +
                    "\t\t" + ct[i] + "\t" + tat[i] + "\t" + wt[i]);
        }
    }
}


illustrate multi threading using 2 thread classes.
Class A performs arithmetic operations
and class B performs trigonometric operations.

import java.util.Scanner;

class ArithmeticThread extends Thread {
    int a, b;

    public ArithmeticThread(int a, int b) {
        this.a = a;
        this.b = b;
    }

    public void run() {
        System.out.println("\n<-----Arithmetic Thread started------>");
        System.out.println("\nAddition : " + (a + b));
        System.out.println("\nSubtraction : " + (a - b));
        System.out.println("\nMultiplication : " + (a * b));
        System.out.println("\nDivision : " + (a / b));
        System.out.println("\nArithmetic thread ended" + "\n" + " ");
    }
}

class TrigThread extends Thread {
    double angle;

    public TrigThread(double angle) {
        this.angle = angle;
    }

    public void run() {
        System.out.println("\n<-----Trigonometric Thread started------>");
        System.out.println("\nSine : " + Math.sin(Math.toRadians(angle)));
        System.out.println("\nCosine : " + Math.cos(Math.toRadians(angle)));
        System.out.println("\nTangent : " + Math.tan(Math.toRadians(angle)));
        System.out.println("\nTrigonometric thread ended");
    }
}

class MultiThreadExample {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("\nEnter value for a : ");
        int a = sc.nextInt();
        System.out.print("\nEnter value for b : ");
        int b = sc.nextInt();
        System.out.print("\nEnter angle in degrees : ");
        double angle = sc.nextDouble();
        ArithmeticThread at = new ArithmeticThread(a, b);
        TrigThread tt = new TrigThread(angle);
        at.start();
        tt.start();
    }
}


Perform over all grade calculation of a student using multithreads.
Input student marks of 5 subjects and grade the marks of each subject accordingly.
Above 90-->S grade
80-90-->A grade
70-80-->B grade
60-70-->C grade
50-60-->D grade
Below 50 F grade 
Calculate Over all grade using average of the marks.

import java.util.Scanner;

class SubjectGradeThread extends Thread {
    private int marks;
    private int subjectNumber;

    public SubjectGradeThread(int marks, int subjectNumber) {
        this.marks = marks;
        this.subjectNumber = subjectNumber;
    }

    @Override
    public void run() {
        String grade = calculateGrade(marks);
        System.out.println("Subject " + subjectNumber + " grade: " + grade);
    }

    private String calculateGrade(int marks) {
        if (marks >= 90) {
            return "S";
        } else if (marks >= 80) {
            return "A";
        } else if (marks >= 70) {
            return "B";
        } else if (marks >= 60) {
            return "C";
        } else if (marks >= 50) {
            return "D";
        } else {
            return "F";
        }
    }
}

class OverallGradeCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        final int NUM_SUBJECTS = 5;
        int[] marks = new int[NUM_SUBJECTS];
        for (int i = 0; i < NUM_SUBJECTS; i++) {
            System.out.print("Enter marks for subject " + (i + 1) + ": ");
            marks[i] = scanner.nextInt();
        }
        SubjectGradeThread[] threads = new SubjectGradeThread[NUM_SUBJECTS];
        for (int i = 0; i < NUM_SUBJECTS; i++) {
            threads[i] = new SubjectGradeThread(marks[i], i + 1);
            threads[i].start();
        }
        double averageMarks = calculateAverage(marks);
        String overallGrade = calculateGrade(averageMarks);
        System.out.println("Overall grade: " + overallGrade);
    }

    private static double calculateAverage(int[] marks) {
        int sum = 0;
        for (int mark : marks) {
            sum += mark;
        }
        return sum / (double) marks.length;
    }

    private static String calculateGrade(double marks) {
        if (marks >= 90) {
            return "S";
        } else if (marks >= 80) {
            return "A";
        } else if (marks >= 70) {
            return "B";
        } else if (marks >= 60) {
            return "C";
        } else if (marks >= 50) {
            return "D";
        } else {
            return "F";
        }
    }
}

Producer consumer problem using semaphores:-

import java.util.concurrent.Semaphore;

class Q {
    int item;
    static Semaphore semCon = new Semaphore(0);
    static Semaphore semProd = new Semaphore(1);

    void get() {
        try {
            semCon.acquire();
        } catch (InterruptedException e) {
            System.out.println("InterruptedException caught");
        }
        System.out.println("Consumer consumed item : " + item);
        semProd.release();
    }

    void put(int item) {
        try {
            semProd.acquire();
        } catch (InterruptedException e) {
            System.out.println("InterruptedException caught");
        }
        this.item = item;
        System.out.println("Producer produced item : " + item);
        semCon.release();
    }
}

class Producer implements Runnable {
    Q q;

    Producer(Q q) {
        this.q = q;
        new Thread(this, "Producer").start();
    }

    public void run() {
        for (int i = 0; i < 5; i++)
            q.put(i);
    }
}

class Consumer implements Runnable {
    Q q;

    Consumer(Q q) {
        this.q = q;
        new Thread(this, "Consumer").start();
    }

    public void run() {
        for (int i = 0; i < 5; i++)
            q.get();
    }
}

class PC {
    public static void main(String args[]) {
        Q q = new Q();
        new Consumer(q);
        new Producer(q);
    }
}

Reader writer problem using semaphores:-
import java.util.Scanner;
import java.util.concurrent.Semaphore;

class ReaderWriterProblem {
    private static Semaphore mutex = new Semaphore(1);
    private static Semaphore readerCount = new Semaphore(0);
    private static int readers = 0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter number of readers: ");
        int numReaders = scanner.nextInt();
        System.out.print("Enter number of writers: ");
        int numWriters = scanner.nextInt();
        for (int i = 0; i < numReaders; i++) {
            new Thread(new Reader(i)).start();
        }
        for (int i = 0; i < numWriters; i++) {
            new Thread(new Writer(i)).start();
        }
    }

    private static class Reader implements Runnable {
        private int id;

        public Reader(int id) {
            this.id = id;
        }

        public void run() {
            while (true) {
                try {
                    readerCount.acquire();
                    mutex.acquire();
                    readers++;
                    if (readers == 1) {
                        mutex.acquire();
                    }
                    mutex.release();
                    System.out.println("Reader " + id + " is reading");
                    mutex.acquire();
                    readers--;
                    if (readers == 0) {
                        mutex.release();
                    }
                    mutex.release();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private static class Writer implements Runnable {
        private int id;

        public Writer(int id) {
            this.id = id;
        }

        public void run() {
            while (true) {
                try {
                    mutex.acquire();
                    System.out.println("Writer " + id + " is writing");
                    mutex.release();
                    readerCount.release();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

Dining philosopher problem using semaphore

import java.util.concurrent.Semaphore;

class DiningPhilosopher {
    public static void main(String[] args) {
        Semaphore[] forks = new Semaphore[5];
        for (int i = 0; i < forks.length; i++) {
            forks[i] = new Semaphore(1);
        }
        Philosopher[] philosophers = new Philosopher[5];
        for (int i = 0; i < philosophers.length; i++) {
            philosophers[i] = new Philosopher(i, forks[i], forks[(i + 1) % 5]);
        }
        for (Philosopher philosopher : philosophers) {
            philosopher.start();
        }
    }
}

class Philosopher extends Thread {
    private int id;
    private Semaphore leftFork;
    private Semaphore rightFork;

    public Philosopher(int id, Semaphore leftFork, Semaphore rightFork) {
        this.id = id;
        this.leftFork = leftFork;
        this.rightFork = rightFork;
    }

    public void run() {
        while (true) {
            try {
                System.out.println("Philosopher " + id + " is thinking.");
                leftFork.acquire();
                System.out.println("Philosopher " + id + " picks up left fork.");
                rightFork.acquire();
                System.out.println("Philosopher " + id + " picks up right fork.");
                System.out.println("Philosopher " + id + " is eating.");
                Thread.sleep(1000);
                rightFork.release();
                System.out.println("Philosopher " + id + " puts down right fork.");
                leftFork.release();
                System.out.println("Philosopher " + id + " puts down left fork.");
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

BANKer's algorithm program

import java.util.*;
import java.io.*;
import java.util.Scanner;

class BankersAlgoExample {
    static void findNeedValue(int needArray[][], int maxArray[][], int allocationArray[][], int totalProcess,
            int totalResources) {
        for (int i = 0; i < totalProcess; i++) {
            for (int j = 0; j < totalResources; j++) {
                needArray[i][j] = maxArray[i][j] - allocationArray[i][j];
            }
        }
    }

    static boolean checkSafeSystem(int processes[], int availableArray[], int maxArray[][], int allocationArray[][],
            int totalProcess, int totalResources) {
        int[][] needArray = new int[totalProcess][totalResources];
        findNeedValue(needArray, maxArray, allocationArray, totalProcess, totalResources);
        boolean[] finishProcesses = new boolean[totalProcess];
        int[] safeSequenceArray = new int[totalProcess];
        int[] workArray = new int[totalResources];
        for (int i = 0; i < totalResources; i++)
            workArray[i] = availableArray[i];
        int counter = 0;
        while (counter < totalProcess) {
            boolean foundSafeSystem = false;
            for (int m = 0; m < totalProcess; m++) {
                if (finishProcesses[m] == false) {
                    int j;
                    for (j = 0; j < totalResources; j++)
                        if (needArray[m][j] > workArray[j])
                            break;
                    if (j == totalResources) {
                        for (int k = 0; k < totalResources; k++)
                            workArray[k] += allocationArray[m][k];
                        safeSequenceArray[counter++] = m;
                        finishProcesses[m] = true;
                        foundSafeSystem = true;
                    }
                }
            }
            if (foundSafeSystem == false) {
                System.out.print("The system is not in the safe state because lack of resources");
                return false;
            }
        }
        System.out.print("The system is in safe sequence and the sequence is as follows: ");
        for (int i = 0; i < totalProcess; i++)
            System.out.print("P" + safeSequenceArray[i] + " ");
        return true;
    }

    public static void main(String[] args) {
        int numberOfProcesses, numberOfResources;
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter total number of processes");
        numberOfProcesses = sc.nextInt();
        System.out.println("Enter total number of resources");
        numberOfResources = sc.nextInt();
        int processes[] = new int[numberOfProcesses];
        for (int i = 0; i < numberOfProcesses; i++) {
            processes[i] = i;
        }
        int availableArray[] = new int[numberOfResources];
        for (int i = 0; i < numberOfResources; i++) {
            System.out.println("Enter the availability of resource" + i + ": ");
            availableArray[i] = sc.nextInt();
        }
        int maxArray[][] = new int[numberOfProcesses][numberOfResources];
        for (int i = 0; i < numberOfProcesses; i++) {
            for (int j = 0; j < numberOfResources; j++) {
                System.out.println("Enter the maximum resource" + j + " that can be allocated to process"
                        + i + ": ");
                maxArray[i][j] = sc.nextInt();
            }
        }
        int allocationArray[][] = new int[numberOfProcesses][numberOfResources];
        for (int i = 0; i < numberOfProcesses; i++) {
            for (int j = 0; j < numberOfResources; j++) {
                System.out.println("How many instances of resource" + j + " are allocated to process" + i
                        + "? ");
                allocationArray[i][j] = sc.nextInt();
            }
        }
        checkSafeSystem(processes, availableArray, maxArray, allocationArray, numberOfProcesses,
                numberOfResources);
    }
}




